module test_EdgeForest
  !
  ! DESCRIPTION:
  !  Test the FATES edge forest code
  !
  use FatesConstantsMod, only : r8 => fates_r8
  use FatesEdgeForestMod, only : indexx
  use FatesEdgeForestMod, only : get_fraction_of_edgeforest_in_each_bin
  use FatesEdgeForestMod, only : gffeb_lognorm_numerator, gffeb_lognorm_denominator
  use FatesEdgeForestMod, only : assign_patch_to_bins
  use funit

  implicit none

  @TestCase
  type, extends(TestCase) :: TestEdgeForest

    real(r8), dimension(:), allocatable :: array_to_sort
    integer, dimension(:), allocatable  :: sorted_indices

    contains
      procedure :: setUp
      procedure :: tearDown
  end type TestEdgeForest

  real(r8), parameter :: tol = 1.e-7_r8

  integer, parameter :: n_to_sort = 5

  integer, parameter :: nlevedgeforest = 5
  real(r8), parameter, dimension(nlevedgeforest) :: efb_amplitudes = (/ 334.20118864369647, 7.453608488098321, 2.8450130607077506, 1.601064269911203, 0.9227139932095219 /)
  real(r8), parameter, dimension(nlevedgeforest-1) :: efb_sigmas = (/ 1.185102216622059, 0.6230347414031212, 0.7500050901443256, 0.8465094354405984 /)
  real(r8), parameter, dimension(nlevedgeforest-1) :: efb_centers = (/ 5.4114116418770735, 2.7788419192134937, 2.3020137304843664, 1.973996133523811 /)
  real(r8), parameter :: efb_decay = 4.151608208778201

  real(r8), parameter, dimension(nlevedgeforest) :: expected_90pctForest = (/ &
  0.3604703360785574, &
  0.3563516833665867, &
  0.15133172878079243, &
  0.06997908873353981, &
  0.08298120925273385 /)


  contains

    subroutine setUp(this)
      class(TestEdgeForest), intent(inout) :: this
      allocate(this%array_to_sort(n_to_sort))
      allocate(this%sorted_indices(n_to_sort))
    end subroutine setUp

    subroutine tearDown(this)
      class(TestEdgeForest), intent(inout) :: this
      if (allocated(this%array_to_sort)) deallocate(this%array_to_sort)
      if (allocated(this%sorted_indices)) deallocate(this%sorted_indices)
    end subroutine tearDown

    @Test
    subroutine indexx_alreadySorted(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1.62_r8, 2.72_r8, 3.14_r8, 6.28_r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_alreadySorted

    @Test
    subroutine indexx_reverseSorted(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 6.28_r8, 3.14_r8, 2.72_r8, 1.62_r8, 1._r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 5, 4, 3, 2, 1 /), this%sorted_indices)

    end subroutine indexx_reverseSorted

    @Test
    subroutine indexx_lowTie(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1._r8, 2.72_r8, 3.14_r8, 6.28_r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_lowTie

    @Test
    subroutine indexx_highTie(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1.62_r8, 2.72_r8, 3.14_r8, 3.14_r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_highTie

    @Test
    subroutine indexx_random(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 3._r8, 8._r8, 10._r8, 2._r8, 7._r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 4, 1, 5, 2, 3 /), this%sorted_indices)

    end subroutine indexx_random


    @Test
    subroutine indexx_all_equal(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1._r8, 1._r8, 1._r8, 1._r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_all_equal


    ! @Test
    ! subroutine edge_distrib_test100pctForest(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 0._r8
    !   expected = (/ &
    !      0, &
    !      0, &
    !      0, &
    !      0, &
    !      1 /)

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected, fraction_forest_in_each_bin, tolerance=tol)

    ! end subroutine edge_distrib_test100pctForest


    ! @Test
    ! subroutine edge_distrib_test90pctForest_bin1(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 10._r8

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected_90pctForest(1)/sum(expected_90pctForest), fraction_forest_in_each_bin(1), tolerance=tol)

    ! end subroutine edge_distrib_test90pctForest_bin1


    ! @Test
    ! subroutine edge_distrib_test90pctForest_bin2(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 10._r8

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected_90pctForest(2)/sum(expected_90pctForest), fraction_forest_in_each_bin(2), tolerance=tol)

    ! end subroutine edge_distrib_test90pctForest_bin2


    ! @Test
    ! subroutine edge_distrib_test90pctForest_bin3(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 10._r8

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected_90pctForest(3)/sum(expected_90pctForest), fraction_forest_in_each_bin(3), tolerance=tol)

    ! end subroutine edge_distrib_test90pctForest_bin3


    ! @Test
    ! subroutine edge_distrib_test90pctForest_bin4(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 10._r8

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected_90pctForest(4)/sum(expected_90pctForest), fraction_forest_in_each_bin(4), tolerance=tol)

    ! end subroutine edge_distrib_test90pctForest_bin4


    ! @Test
    ! subroutine edge_distrib_test90pctForest_bin4_noNorm(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 10._r8

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin, norm=.false.)

    !   @assertEqual(expected_90pctForest(4), fraction_forest_in_each_bin(4), tolerance=tol)

    ! end subroutine edge_distrib_test90pctForest_bin4_noNorm



    ! @Test
    ! subroutine edge_distrib_test90pctForest_bin5(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 10._r8

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected_90pctForest(5)/sum(expected_90pctForest), fraction_forest_in_each_bin(5), tolerance=tol)

    ! end subroutine edge_distrib_test90pctForest_bin5


    ! @Test
    ! subroutine edge_distrib_test50pctForest(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(nlevedgeforest), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(nlevedgeforest) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 100._r8 * 0.5
    !   expected = (/ &
    !      0.0005483656664050726, &
    !      3.7618555157475816e-06, &
    !      0.0004850630862283096, &
    !      0.006840069686902661, &
    !      0.9921227397049482 /)

    !   call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected, fraction_forest_in_each_bin, tolerance=tol)

    ! end subroutine edge_distrib_test50pctForest

    @Test
    subroutine test_get_fraction_of_edgeforest_in_each_bin_x0(this)
      ! If % nonforest is zero, all forest should be in last edge bin ("deep forest")
      class(TestEdgeForest), intent(inout) :: this
      real(r8) :: pct_nonforest = 0._r8
      integer, parameter :: nlevedgeforest_tmp = 3
      real(r8), dimension(nlevedgeforest_tmp) :: efb_params_dummy = (/ 1._r8, 2._r8, 3._r8 /)
      logical :: norm = .false.  ! Shouldn't matter for this test
      ! Output
      real(r8), dimension(nlevedgeforest_tmp) :: fraction_forest_in_bin

      call get_fraction_of_edgeforest_in_each_bin(pct_nonforest, nlevedgeforest_tmp, &
           efb_params_dummy, efb_params_dummy, efb_params_dummy, &
           efb_params_dummy, efb_params_dummy, efb_params_dummy, &
           efb_params_dummy, efb_params_dummy, efb_params_dummy, &
           fraction_forest_in_bin, norm)

      @assertEqual( (/ 0._r8, 0._r8, 1._r8 /) , fraction_forest_in_bin)

    end subroutine test_get_fraction_of_edgeforest_in_each_bin_x0

    @Test
    subroutine test_gffeb_lognorm_numerator(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8) :: x
      real(r8) :: A      ! Amplitude
      real(r8) :: mu     ! Center
      real(r8) :: sigma  ! Sigma
      real(r8) :: expected
      real(r8) :: actual

      x = 10._r8
      ! Bin 4
      A = 1.601064269911203
      sigma = 0.8465094354405984
      mu = 1.973996133523811
      expected = 1.4848754270133655

      actual = gffeb_lognorm_numerator(x, A, mu, sigma)

      @assertEqual(expected, actual, tolerance=tol)

    end subroutine test_gffeb_lognorm_numerator

    @Test
    subroutine test_gffeb_lognorm_denominator(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8) :: x
      real(r8) :: A      ! Amplitude
      real(r8) :: mu     ! Center
      real(r8) :: sigma  ! Sigma
      real(r8) :: expected
      real(r8) :: actual

      x = 10._r8
      ! Bin 4
      sigma = 0.8465094354405984
      expected = 21.21884485617329

      actual = gffeb_lognorm_denominator(x, sigma)

      @assertEqual(expected, actual, tolerance=tol)

    end subroutine test_gffeb_lognorm_denominator

    @Test
    subroutine test_assign_patch_to_bins_01(this)
      ! The site has just one forest patch. All of the site's forest area is in the bin closest to edge.
      class(TestEdgeForest), intent(inout) :: this
      integer, parameter :: nlevedgeforest_tmp = 3

      ! The site has 100 area of forest
      real(r8) :: area_forest_patches = 100._r8

      ! The size of this patch is 100 area
      real(r8) :: patch_area = 100._r8

      ! So far none of the site's forest area has been allocated to any bin
      real(r8) :: sum_forest_bins_so_far_m2 = 0._r8

      ! Out
      real(r8), dimension(nlevedgeforest_tmp) :: area_in_edgeforest_bins

      ! All of the site's forest is in the bin closest to edge
      real(r8), dimension(nlevedgeforest_tmp), target :: fraction_forest_in_each_bin
      fraction_forest_in_each_bin = (/ 1._r8, 0._r8, 0._r8 /)

      call assign_patch_to_bins(fraction_forest_in_each_bin, area_forest_patches, patch_area, &
           nlevedgeforest_tmp, tol, sum_forest_bins_so_far_m2, area_in_edgeforest_bins)

      ! 0+100=100 area of the site's forest has been assigned after this call
      @assertEqual(100._r8, sum_forest_bins_so_far_m2, tolerance=tol)

      ! All of the patch's area was assigned to the first edge bin
      @assertEqual(100._r8, area_in_edgeforest_bins(1), tolerance=tol)
    end subroutine test_assign_patch_to_bins_01

    @Test
    subroutine test_assign_patch_to_bins_02(this)
      ! The site has multiple forest patches. All of the site's forest area is in the bin closest to edge.
      class(TestEdgeForest), intent(inout) :: this
      integer, parameter :: nlevedgeforest_tmp = 3

      ! The site has 300 area of forest
      real(r8) :: area_forest_patches = 300._r8

      ! The size of this patch is 100 area
      real(r8) :: patch_area = 100._r8

      ! So far none of the site's forest area has been allocated to any bin
      real(r8) :: sum_forest_bins_so_far_m2 = 0._r8

      ! Out
      real(r8), dimension(nlevedgeforest_tmp) :: area_in_edgeforest_bins

      ! All of the site's forest is in the bin closest to edge
      real(r8), dimension(nlevedgeforest_tmp), target :: fraction_forest_in_each_bin
      fraction_forest_in_each_bin = (/ 1._r8, 0._r8, 0._r8 /)

      call assign_patch_to_bins(fraction_forest_in_each_bin, area_forest_patches, patch_area, &
           nlevedgeforest_tmp, tol, sum_forest_bins_so_far_m2, area_in_edgeforest_bins)

      ! 0+100=100 area of the site's forest has been assigned after this call
      @assertEqual(100._r8, sum_forest_bins_so_far_m2, tolerance=tol)

      ! All of the patch's area was assigned to the first edge bin
      @assertEqual(100._r8, area_in_edgeforest_bins(1), tolerance=tol)
      @assertEqual(0._r8, area_in_edgeforest_bins(2), tolerance=tol)
      @assertEqual(0._r8, area_in_edgeforest_bins(3), tolerance=tol)
    end subroutine test_assign_patch_to_bins_02

    @Test
    subroutine test_assign_patch_to_bins_03(this)
      ! The site has just one forest patch. The site's forest split evenly across the two bins closest to edge.
      class(TestEdgeForest), intent(inout) :: this
      integer, parameter :: nlevedgeforest_tmp = 3

      ! The site has 100 area of forest
      real(r8) :: area_forest_patches = 100._r8

      ! The size of this patch is 100 area
      real(r8) :: patch_area = 100._r8

      ! So far none of the site's forest area has been allocated to any bin
      real(r8) :: sum_forest_bins_so_far_m2 = 0._r8

      ! Out
      real(r8), dimension(nlevedgeforest_tmp) :: area_in_edgeforest_bins

      ! The site's forest split evenly across the two bins closest to edge
      real(r8), dimension(nlevedgeforest_tmp), target :: fraction_forest_in_each_bin
      fraction_forest_in_each_bin = (/ 0.5_r8, 0.5_r8, 0._r8 /)

      call assign_patch_to_bins(fraction_forest_in_each_bin, area_forest_patches, patch_area, &
           nlevedgeforest_tmp, tol, sum_forest_bins_so_far_m2, area_in_edgeforest_bins)

      ! 0+100=100 area of the site's forest has been assigned after this call
      @assertEqual(100._r8, sum_forest_bins_so_far_m2, tolerance=tol)

      ! Half of the patch's area was assigned to the first edge bin, half to the second
      @assertEqual(50._r8, area_in_edgeforest_bins(1), tolerance=tol)
      @assertEqual(50._r8, area_in_edgeforest_bins(2), tolerance=tol)
      @assertEqual(0._r8, area_in_edgeforest_bins(3), tolerance=tol)
    end subroutine test_assign_patch_to_bins_03

    @Test
    subroutine test_assign_patch_to_bins_04(this)
      ! The site has just one forest patch. The site's forest is split evenly across the two bins farthest from edge.
      class(TestEdgeForest), intent(inout) :: this
      integer, parameter :: nlevedgeforest_tmp = 3

      ! The site has 100 area of forest
      real(r8) :: area_forest_patches = 100._r8

      ! The size of this patch is 100 area
      real(r8) :: patch_area = 100._r8

      ! So far none of the site's forest area has been allocated to any bin
      real(r8) :: sum_forest_bins_so_far_m2 = 0._r8

      ! Out
      real(r8), dimension(nlevedgeforest_tmp) :: area_in_edgeforest_bins

      ! The site's forest is split evenly across the two bins farthest from edge
      real(r8), dimension(nlevedgeforest_tmp), target :: fraction_forest_in_each_bin
      fraction_forest_in_each_bin = (/ 0._r8, 0.5_r8, 0.5_r8 /)

      call assign_patch_to_bins(fraction_forest_in_each_bin, area_forest_patches, patch_area, &
           nlevedgeforest_tmp, tol, sum_forest_bins_so_far_m2, area_in_edgeforest_bins)

      ! 0+100=100 area of the site's forest has been assigned after this call
      @assertEqual(100._r8, sum_forest_bins_so_far_m2, tolerance=tol)

      ! Half of the patch's area was assigned to the second edge bin, half to the third
      @assertEqual(0._r8, area_in_edgeforest_bins(1), tolerance=tol)
      @assertEqual(50._r8, area_in_edgeforest_bins(2), tolerance=tol)
      @assertEqual(50._r8, area_in_edgeforest_bins(3), tolerance=tol)
    end subroutine test_assign_patch_to_bins_04

    @Test
    subroutine test_assign_patch_to_bins_05(this)
      ! The site has multiple forest patches. Some of the site's forest area has already been assigned. The patch isn't big enough to take the rest of the site's forest area.
      class(TestEdgeForest), intent(inout) :: this
      integer, parameter :: nlevedgeforest_tmp = 3

      ! The site has 100 area of forest
      real(r8) :: area_forest_patches = 100._r8

      ! The size of this patch is 50 area
      real(r8) :: patch_area = 50._r8

      ! So far 30 of the site's forest area has been allocated to any bin
      real(r8) :: sum_forest_bins_so_far_m2 = 30._r8

      ! Out
      real(r8), dimension(nlevedgeforest_tmp) :: area_in_edgeforest_bins

      ! The site's forest is split evenly across the two bins farthest from edge
      real(r8), dimension(nlevedgeforest_tmp), target :: fraction_forest_in_each_bin
      fraction_forest_in_each_bin = (/ 0._r8, 0.5_r8, 0.5_r8 /)

      call assign_patch_to_bins(fraction_forest_in_each_bin, area_forest_patches, patch_area, &
           nlevedgeforest_tmp, tol, sum_forest_bins_so_far_m2, area_in_edgeforest_bins)

      ! 30+50=80 area of the site's forest has been assigned after this call
      @assertEqual(80._r8, sum_forest_bins_so_far_m2, tolerance=tol)

      ! Some of the patch's area was assigned to the second edge bin, rest to the third
      @assertEqual(0._r8, area_in_edgeforest_bins(1), tolerance=tol)
      @assertEqual(20._r8, area_in_edgeforest_bins(2), tolerance=tol)
      @assertEqual(30._r8, area_in_edgeforest_bins(3), tolerance=tol)
    end subroutine test_assign_patch_to_bins_05

  end module test_EdgeForest