module test_EdgeForest
  !
  ! DESCRIPTION:
  !  Test the FATES edge forest code
  !
  use FatesConstantsMod, only : r8 => fates_r8
  use FatesEdgeForestMod, only : indexx
  use FatesEdgeForestMod, only : get_fraction_of_forest_in_each_bin
  use FatesEdgeForestMod, only : gffeb_lognorm_numerator, gffeb_lognorm_denominator
  use funit

  implicit none

  @TestCase
  type, extends(TestCase) :: TestEdgeForest

    real(r8), dimension(:), allocatable :: array_to_sort
    integer, dimension(:), allocatable  :: sorted_indices

    contains
      procedure :: setUp
      procedure :: tearDown
  end type TestEdgeForest

  real(r8), parameter :: tol = 1.e-7_r8

  integer, parameter :: n_to_sort = 5

  integer, parameter :: num_edge_forest_bins = 5
  real(r8), parameter, dimension(num_edge_forest_bins) :: efb_amplitudes = (/ 334.20118864369647, 7.453608488098321, 2.8450130607077506, 1.601064269911203, 0.9227139932095219 /)
  real(r8), parameter, dimension(num_edge_forest_bins-1) :: efb_sigmas = (/ 1.185102216622059, 0.6230347414031212, 0.7500050901443256, 0.8465094354405984 /)
  real(r8), parameter, dimension(num_edge_forest_bins-1) :: efb_centers = (/ 5.4114116418770735, 2.7788419192134937, 2.3020137304843664, 1.973996133523811 /)
  real(r8), parameter :: efb_decay = 4.151608208778201
  
  real(r8), parameter, dimension(num_edge_forest_bins) :: expected_90pctForest = (/ &
  0.3604703360785574, &
  0.3563516833665867, &
  0.15133172878079243, &
  0.06997908873353981, &
  0.08298120925273385 /)


  contains

    subroutine setUp(this)
      class(TestEdgeForest), intent(inout) :: this
      allocate(this%array_to_sort(n_to_sort))
      allocate(this%sorted_indices(n_to_sort))
    end subroutine setUp

    subroutine tearDown(this)
      class(TestEdgeForest), intent(inout) :: this
      if (allocated(this%array_to_sort)) deallocate(this%array_to_sort)
      if (allocated(this%sorted_indices)) deallocate(this%sorted_indices)
    end subroutine tearDown

    @Test
    subroutine indexx_alreadySorted(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1.62_r8, 2.72_r8, 3.14_r8, 6.28_r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_alreadySorted

    @Test
    subroutine indexx_reverseSorted(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 6.28_r8, 3.14_r8, 2.72_r8, 1.62_r8, 1._r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 5, 4, 3, 2, 1 /), this%sorted_indices)

    end subroutine indexx_reverseSorted

    @Test
    subroutine indexx_lowTie(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1._r8, 2.72_r8, 3.14_r8, 6.28_r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_lowTie

    @Test
    subroutine indexx_highTie(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1.62_r8, 2.72_r8, 3.14_r8, 3.14_r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_highTie

    @Test
    subroutine indexx_random(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 3._r8, 8._r8, 10._r8, 2._r8, 7._r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 4, 1, 5, 2, 3 /), this%sorted_indices)

    end subroutine indexx_random


    @Test
    subroutine indexx_all_equal(this)
      class(TestEdgeForest), intent(inout) :: this

      this%array_to_sort = (/ 1._r8, 1._r8, 1._r8, 1._r8, 1._r8 /)

      call indexx(this%array_to_sort, this%sorted_indices)

      @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

    end subroutine indexx_all_equal


    @Test
    subroutine get_fraction_of_forest_in_each_bin_test100pctForest(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 0._r8
      expected = (/ &
         0, &
         0, &
         0, &
         0, &
         1 /)

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

      @assertEqual(expected, fraction_forest_in_each_bin, tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test100pctForest


    @Test
    subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin1(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 10._r8

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

      @assertEqual(expected_90pctForest(1)/sum(expected_90pctForest), fraction_forest_in_each_bin(1), tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin1


    @Test
    subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin2(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 10._r8

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

      @assertEqual(expected_90pctForest(2)/sum(expected_90pctForest), fraction_forest_in_each_bin(2), tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin2


    @Test
    subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin3(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 10._r8

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

      @assertEqual(expected_90pctForest(3)/sum(expected_90pctForest), fraction_forest_in_each_bin(3), tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin3


    @Test
    subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin4(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 10._r8

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

      @assertEqual(expected_90pctForest(4)/sum(expected_90pctForest), fraction_forest_in_each_bin(4), tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin4
    
    
    @Test
    subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin4_noNorm(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 10._r8

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin, norm=.false.)

      @assertEqual(expected_90pctForest(4), fraction_forest_in_each_bin(4), tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin4_noNorm



    @Test
    subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin5(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
      real(r8), dimension(num_edge_forest_bins) :: expected
      real(r8) :: pct_nonforest

      pct_nonforest = 10._r8

      call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

      @assertEqual(expected_90pctForest(5)/sum(expected_90pctForest), fraction_forest_in_each_bin(5), tolerance=tol)

    end subroutine get_fraction_of_forest_in_each_bin_test90pctForest_bin5


    ! @Test
    ! subroutine get_fraction_of_forest_in_each_bin_test50pctForest(this)
    !   class(TestEdgeForest), intent(inout) :: this
    !   real(r8), dimension(num_edge_forest_bins), target :: fraction_forest_in_each_bin
    !   real(r8), dimension(num_edge_forest_bins) :: expected
    !   real(r8) :: pct_nonforest

    !   pct_nonforest = 100._r8 * 0.5
    !   expected = (/ &
    !      0.0005483656664050726, &
    !      3.7618555157475816e-06, &
    !      0.0004850630862283096, &
    !      0.006840069686902661, &
    !      0.9921227397049482 /)

    !   call get_fraction_of_forest_in_each_bin(pct_nonforest, num_edge_forest_bins, efb_amplitudes, efb_sigmas, efb_centers, efb_decay, fraction_forest_in_each_bin)

    !   @assertEqual(expected, fraction_forest_in_each_bin, tolerance=tol)

    ! end subroutine get_fraction_of_forest_in_each_bin_test50pctForest
    
    @Test
    subroutine test_gffeb_lognorm_numerator(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8) :: x
      real(r8) :: A      ! Amplitude
      real(r8) :: mu     ! Center
      real(r8) :: sigma  ! Sigma
      real(r8) :: expected
      real(r8) :: actual
      
      x = 10._r8
      ! Bin 4
      A = 1.601064269911203
      sigma = 0.8465094354405984
      mu = 1.973996133523811
      expected = 1.4848754270133655

      actual = gffeb_lognorm_numerator(x, A, mu, sigma)

      @assertEqual(expected, actual, tolerance=tol)

    end subroutine test_gffeb_lognorm_numerator
    
    @Test
    subroutine test_gffeb_lognorm_denominator(this)
      class(TestEdgeForest), intent(inout) :: this
      real(r8) :: x
      real(r8) :: A      ! Amplitude
      real(r8) :: mu     ! Center
      real(r8) :: sigma  ! Sigma
      real(r8) :: expected
      real(r8) :: actual
      
      x = 10._r8
      ! Bin 4
      sigma = 0.8465094354405984
      expected = 21.21884485617329

      actual = gffeb_lognorm_denominator(x, sigma)

      @assertEqual(expected, actual, tolerance=tol)

    end subroutine test_gffeb_lognorm_denominator

  end module test_EdgeForest