module test_Moss
  !
  ! DESCRIPTION:
  !		Test the moss functionality
  !
  use ESMF
  use FatesConstantsMod,   only : r8 => fates_r8
  use FatesConstantsMod,   only : nearzero
  use FatesMossMod
  use funit

  implicit none

  @TestCase
  type, extends(TestCase) :: TestMoss
  end type TestMoss

  real(r8), parameter :: tol = 1.e-13_r8

  contains

    @Test
    subroutine al_test(this)
      ! test to make sure refactoring has no effect
      class(TestMoss), intent(inout) :: this ! test object
      real(r8) :: cla_m2_per_plot  ! Cumulative leaf area on forest floor (m2)
      real(r8) :: moss_biomass  ! kg/m2 plot
      
      cla_m2_per_plot = 15._r8
      moss_biomass = 1._r8

      @assertEqual(0.5975005946182375_r8, available_light_under_canopy_and_moss(cla_m2_per_plot, moss_biomass))

    end subroutine al_test

    @Test
    subroutine algf_min_0(this)
      ! test that light growth multiplier is never < 0
      class(TestMoss), intent(inout) :: this ! test object
      real(r8) :: cla_m2_per_plot  ! Cumulative leaf area on forest floor (m2)
      real(r8) :: moss_biomass  ! kg/m2 plot
      
      cla_m2_per_plot = 999._r8
      moss_biomass = 999._r8

      @assertEqual(0.0_r8, light_growth_multiplier(cla_m2_per_plot, moss_biomass))

    end subroutine algf_min_0

    @Test
    subroutine algf_max_1(this)
      ! test that light growth multiplier is never > 1
      class(TestMoss), intent(inout) :: this ! test object
      real(r8) :: cla_m2_per_plot  ! Cumulative leaf area on forest floor (m2)
      real(r8) :: moss_biomass  ! kg/m2 plot
      
      cla_m2_per_plot = -999._r8
      moss_biomass = -999._r8

      @assertEqual(1.0_r8, light_growth_multiplier(cla_m2_per_plot, moss_biomass))

    end subroutine algf_max_1

    @Test
    subroutine fcgf_smooth(this)
      ! test that there's a smooth transition from fcgf=1 at the point where alff starts to affect it
      class(TestMoss), intent(inout) :: this ! test object

      @assertEqual(1.0_r8, FCGF_INTERCEPT - FCGF_ALFF_THRESH**2)

    end subroutine fcgf_smooth

    @Test
    subroutine fcgf_min_0(this)
      ! test that forest cover growth multiplier is never < 0
      class(TestMoss), intent(inout) :: this ! test object

      @assertEqual(0.0_r8, forest_cover_growth_multiplier(999._r8))

    end subroutine fcgf_min_0

    @Test
    subroutine fcgf_max_1(this)
      ! test that forest cover growth multiplier is never > 1
      class(TestMoss), intent(inout) :: this ! test object

      @assertEqual(1.0_r8, forest_cover_growth_multiplier(-999._r8))

    end subroutine fcgf_max_1

    @Test
    subroutine dlgf_smooth(this)
      ! test that there's a smooth transition from dlgf=1 at the point where deciduous leaf litter starts to affect it
      class(TestMoss), intent(inout) :: this ! test object

      @assertEqual(1.0_r8, exp(-DLGF_DECAY * DLGF_DECLIT_THRESH))

    end subroutine dlgf_smooth

    @Test
    subroutine dlgf_min_0(this)
      ! test that litter growth multiplier is never < 0
      class(TestMoss), intent(inout) :: this ! test object

      @assertEqual(0.0_r8, litter_growth_multiplier(999._r8), tolerance=tol)

    end subroutine dlgf_min_0

    @Test
    subroutine dlgf_max_1(this)
      ! test that litter growth multiplier is never > 1
      class(TestMoss), intent(inout) :: this ! test object

      @assertEqual(1.0_r8, litter_growth_multiplier(-999._r8))

    end subroutine dlgf_max_1

    @Test
    subroutine ZeroMoss(this)
      ! test that all outputs are zero if input moss biomass is zero
      class(TestMoss), intent(inout) :: this ! test object
      real(r8) :: alff    ! Available light on the forest floor (0-1)
      real(r8) :: cla     ! Cumulative leaf area on forest floor (m2)
      real(r8) :: decLit  ! Fresh deciduous leaf litter (t/ha)
      real(r8) :: moss_biom_kg  ! Moss biomass (kg, not kg/m2)
      real(r8) :: moss_litter_flux  ! Moss biomass flux to litter (t/ha)
      real(r8) :: livemoss_depth  ! Depth (m) of live moss layer

      ! All inputs good for moss except zero biomass
      alff = 1.0_r8
      cla = 0.0_r8
      decLit = 0.0_r8
      moss_biom_kg = 0.0_r8

      ! Outputs should all be zero
      call moss(alff, cla, decLit, moss_biom_kg, moss_litter_flux, livemoss_depth)
      @assertEqual(0.0_r8, moss_biom_kg)
      @assertEqual(0.0_r8, moss_litter_flux)
      @assertEqual(0.0_r8, livemoss_depth)

    end subroutine ZeroMoss

    @Test
    subroutine MossA(this)
      ! temporary test to make sure refactoring has no effect
      class(TestMoss), intent(inout) :: this ! test object
      real(r8) :: alff    ! Available light on the forest floor (0-1)
      real(r8) :: cla     ! Cumulative leaf area on forest floor (m2)
      real(r8) :: decLit  ! Fresh deciduous leaf litter (t/ha)
      real(r8) :: moss_biom_kg  ! Moss biomass (kg, not kg/m2)
      real(r8) :: moss_litter_flux  ! Moss biomass flux to litter (t/ha)
      real(r8) :: livemoss_depth  ! Depth (m) of live moss layer

      alff = 1.0_r8
      cla = 3.0_r8
      decLit = 1.0_r8
      moss_biom_kg = 0.5_r8

      call moss(alff, cla, decLit, moss_biom_kg, moss_litter_flux, livemoss_depth)
      @assertEqual(0.4454218660396674_r8, moss_biom_kg, tolerance=tol)
      @assertEqual(0.002560000168681147_r8, moss_litter_flux, tolerance=tol)
      @assertEqual(0.4949131844885193E-04_r8, livemoss_depth, tolerance=tol)

    end subroutine MossA


end module test_Moss
