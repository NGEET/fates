
#======================================================================
# Test setup:
#======================================================================

cd $CASEROOT

# turn on memory leak check - if comparing with baseline also 
# compare memory highwater mark from baseline 
set DETECT_MEMORY_LEAK
if ($?COMPARE_BASELINE ) then
  set COMPARE_MEMORY
  set COMPARE_THROUGHPUT
endif

#--- clone the main case to create ref1 case to spinup with
set CASER0  = ${CASEROOT}.ref1
set CASERR1 = ${CASEROOT}
set CASE0   = ${CASE}

cd $CIMEROOT/scripts
rm -r -f ${CASER0}; ./create_clone -case ${CASER0} -clone ${CASERR1} 

cd $CASERR1
set STOP_N      = `./xmlquery STOP_N          -value`
set STOP_OPTION = `./xmlquery STOP_OPTION     -value`
set EXEROOT = `./xmlquery EXEROOT     -value`

@ stopnf = ${STOP_N}
@ stopn1 = ${STOP_N} / 2
@ stopn2 = ${stopnf} - $stopn1


cd $CASER0
./xmlchange -file env_build.xml -id EXEROOT        -val ${EXEROOT} || exit -1
./xmlchange -file env_build.xml -id BUILD_COMPLETE -val TRUE       || exit -1
./case_setup -testmode

#======================================================================
# (1) Test run: do a spinup run in the ref1 case
#======================================================================

cd $CASER0

echo ""  >>& $TESTSTATUS_LOG
echo "doing a ${stopn1} ${STOP_OPTION} initial spinup test, writing restarts at end of run" >>& $TESTSTATUS_LOG 
echo " short term archiving is on" >>& $TESTSTATUS_LOG 

# set up run
set DOUT_S_ROOT          = `./xmlquery DOUT_S_ROOT     -value`
set DOUTSR0              =  $DOUT_S_ROOT
set CASE                 = `./xmlquery CASE -value`
set CASESPIN             = $CASE
./xmlchange -file env_run.xml -id STOP_N    -val ${stopn1} || exit -1
./xmlchange CLM_ACCELERATED_SPINUP=on                      || exit -1

./case.run
if ($status != 0) then
    echo " ERROR: case.run failed" >>& $TESTSTATUS_LOG
    exit -1
endif

# Run the short-term archiver.. this is a short-term hack until
# a better solution can be found.
./case.st_archive
if($status != 0) then
    echo " ERROR: case.st_archive failed ">>& $TESTSTATUS_LOG
    exit -1
endif 

# must look in short term archiving directory for cpl log files
set CplLogFile = `ls -1t $DOUT_S_ROOT/cpl/logs/cpl.log* | head -1`
if ( $?CplLogFile ) then
    if (-e $CplLogFile) then
       set pass = `zgrep "SUCCESSFUL TERMINATION" $CplLogFile | wc -l`
       if ($pass != 1) then
           echo "ERROR: coupler log $CplLogFile indicates model run failed" >>& $TESTSTATUS_LOG
	   exit -1
       else 
           echo "Success: test log is $CplLogFile" >>& $TESTSTATUS_LOG 
       endif
    endif
else
    echo "ERROR: no coupler log created, model run failed" >>& $TESTSTATUS_LOG
    exit -1
endif

echo ""  >>& $TESTSTATUS_LOG
echo "moving relevant history files to suffix with command " >>& $TESTSTATUS_LOG
echo "$SCRIPTSROOT/Tools/component_compare_move.sh -rundir $RUNDIR -testcase $CASE -suffix spinup $add_iop" >>& $TESTSTATUS_LOG
echo "" >>& $TESTSTATUS_LOG

$SCRIPTSROOT/Tools/component_compare_move.sh -rundir $RUNDIR -testcase $CASE -suffix "spinup" $add_iop

#======================================================================
# (2) Test run: do the final non-spinup run in the cloned main case
#======================================================================

cd ${CASERR1}

echo ""  >>& $TESTSTATUS_LOG
echo "doing a ${stopn2} ${STOP_OPTION} final spinup test" >>& $TESTSTATUS_LOG 
echo " short term archiving is off" >>& $TESTSTATUS_LOG 

# determine refdate for run
set RUNDIR  = `./xmlquery RUNDIR   -value`
mkdir -p $RUNDIR
set refdate = `ls -1dt ${DOUTSR0}/rest/*-00000* | head -1 | sed "s/-00000.*//" | sed "s/^.*rest\///" ` || exit -1
ln -s ${DOUTSR0}/rest/${refdate}-00000/*${refdate}*  $RUNDIR/.

# set up run
./xmlchange RUN_TYPE="hybrid"          || exit -1
./xmlchange GET_REFCASE=FALSE          || exit -1
./xmlchange RUN_REFCASE=${CASESPIN}    || exit -1
./xmlchange RUN_REFDATE=${refdate}     || exit -1
./xmlchange STOP_N=${stopn2}           || exit -1
./xmlchange DOUT_S=FALSE               || exit -1
./xmlchange CLM_ACCELERATED_SPINUP=on  || exit -1

set CASE = `./xmlquery CASE -value`

./case.run
if ($status != 0) then
    echo " ERROR: case.run failed" >>& $TESTSTATUS_LOG
    exit -1
endif

# since short term archiving is off, must now look in $RUNDIR for cpl log files
set CplLogFile = `ls -1t $RUNDIR/cpl.log* | head -1`
if ( $?CplLogFile ) then
    if (-e $CplLogFile) then
       set pass = `zgrep "SUCCESSFUL TERMINATION" $CplLogFile | wc -l`
       if ($pass != 1) then
           echo "ERROR: coupler log $CplLogFile indicates model run failed" >>& $TESTSTATUS_LOG 
 	   exit -1
       else 
           echo "Success: test log is $CplLogFile" >>& $TESTSTATUS_LOG 
       endif
    endif
else
    echo "ERROR: no coupler log created, model run failed" >>& $TESTSTATUS_LOG
    exit -1
endif

echo ""  >>& $TESTSTATUS_LOG
echo "moving relevant history files to suffix with command " >>& $TESTSTATUS_LOG
echo "$SCRIPTSROOT/Tools/component_compare_move.sh -rundir $RUNDIR -testcase $CASE -suffix base $add_iop" >>& $TESTSTATUS_LOG
echo "" >>& $TESTSTATUS_LOG

# the following line creates the component history files used in comparison to baselines
$SCRIPTSROOT/Tools/component_compare_move.sh -rundir $RUNDIR -testcase "$CASE" -suffix "base" $add_iop

#======================================================================
# Test status check:
#======================================================================

set CPLLOG = $CplLogFile

if ! ( $?IOP_ON ) then
    echo "DONE ${CASEBASEID} : (test finished, successful coupler log) " >&! $TESTSTATUS_OUT
    echo " --- Test Functionality: ---" >>& $TESTSTATUS_OUT
endif

echo "done ${CASEBASEID} : ($msg finished, successful coupler log) " >>& $TESTSTATUS_LOG
echo "" >>& $TESTSTATUS_LOG

if ( $?IOP_ON ) then
    # note that suffix2 is none - since there is no functionality that 
    # this test performs other than running
    # by setting the suffix to none - will not be generating any comparisions 
    # other than the iop comparison for the base case
    $SCRIPTSROOT/Tools/component_compare_test.sh -rundir $RUNDIR -testcase $CASE -testcase_base $CASEBASEID -suffix1 base -suffix2 none $add_iop -msg "$msg" >>& $TESTSTATUS_OUT
else
   echo "PASS ${CASEBASEID} : successful coupler log " >>& $TESTSTATUS_OUT
   echo "PASS ${CASEBASEID} : test functionality summary " >>& $TESTSTATUS_OUT
endif


