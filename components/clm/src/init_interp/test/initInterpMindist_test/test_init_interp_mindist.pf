module test_init_interp_mindist

  ! Tests of initInterpMindist

  use pfunit_mod
  use initInterpMindist
  use shr_kind_mod , only : r8 => shr_kind_r8
  use clm_varcon   , only: spval

  implicit none

  @TestCase
  type, extends(TestCase) :: TestInitInterpMindist
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInitInterpMindist

  real(r8), parameter :: tol = 1.e-13_r8

  type(subgrid_special_indices_type), parameter :: subgrid_special_indices = &
       subgrid_special_indices_type( &
       ipft_not_vegetated = 0, &
       icol_vegetated_or_bare_soil = 10, &
       ilun_vegetated_or_bare_soil = 20, &
       ilun_crop = 21, &
       ilun_landice_multiple_elevation_classes = 22)

  ! value we can use for a special landunit; note that this just needs to differ from
  ! ilun_vegetated_or_bare_soil and from ilun_crop
  integer, parameter :: ilun_special = 29

contains

  ! ========================================================================
  ! Utility routines
  ! ========================================================================


  subroutine setUp(this)
    class(TestInitInterpMindist), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestInitInterpMindist), intent(inout) :: this
  end subroutine tearDown

  !-----------------------------------------------------------------------
  function create_subgrid_info(npts, name, lat, lon, &
       ptype, ctype, ltype, topoglc) &
       result(subgrid_info)
    !
    ! !ARGUMENTS:
    type(subgrid_type) :: subgrid_info  ! function result
    integer, intent(in) :: npts
    character(len=*), intent(in) :: name
    real(r8), intent(in) :: lat(:)
    real(r8), intent(in) :: lon(:)
    integer, intent(in), optional :: ptype(:)
    integer, intent(in), optional :: ctype(:)
    integer, intent(in), optional :: ltype(:)
    real(r8), intent(in), optional :: topoglc(:)
    !
    ! !LOCAL VARIABLES:

    character(len=*), parameter :: subname = 'create_subgrid_info'
    !-----------------------------------------------------------------------

    ! Check array lengths
    @assertEqual(npts, size(lat))
    @assertEqual(npts, size(lon))
    if (present(ptype)) then
       @assertEqual(npts, size(ptype))
    end if
    if (present(ctype)) then
       @assertEqual(npts, size(ctype))
    end if
    if (present(ltype)) then
       @assertEqual(npts, size(ltype))
    end if
    if (present(topoglc)) then
       @assertEqual(npts, size(topoglc))
    end if

    ! Set subgrid_info components

    subgrid_info%name = name

    allocate(subgrid_info%lat(npts))
    subgrid_info%lat = lat
    allocate(subgrid_info%lon(npts))
    subgrid_info%lon = lon
    allocate(subgrid_info%coslat(npts))
    subgrid_info%coslat = cos(subgrid_info%lat)

    if (present(ptype)) then
       allocate(subgrid_info%ptype(npts))
       subgrid_info%ptype = ptype
    end if
    if (present(ctype)) then
       allocate(subgrid_info%ctype(npts))
       subgrid_info%ctype = ctype
    end if
    if (present(ltype)) then
       allocate(subgrid_info%ltype(npts))
       subgrid_info%ltype = ltype
    end if
    if (present(topoglc)) then
       allocate(subgrid_info%topoglc(npts))
       subgrid_info%topoglc = topoglc
    end if

  end function create_subgrid_info


  subroutine wrap_set_mindist(subgridi, subgrido, mindist_index, activei, activeo, &
       fill_missing_with_natveg)
    ! Wrap the call to set_mindist.
    !
    ! If activei / activeo are not provided, they are assumed to be .true. for all points.
    !
    ! If fill_missing_with_natveg is not provided, it is assumed to be false

    ! Arguments:
    type(subgrid_type), intent(in) :: subgridi
    type(subgrid_type), intent(in) :: subgrido
    integer, intent(out) :: mindist_index(:)
    logical, intent(in), optional :: activei(:)
    logical, intent(in), optional :: activeo(:)
    logical, intent(in), optional :: fill_missing_with_natveg

    ! Local variables:
    integer :: npts_i, npts_o
    logical, allocatable :: l_activei(:)
    logical, allocatable :: l_activeo(:)
    logical :: l_fill_missing_with_natveg

    !-----------------------------------------------------------------------

    npts_i = size(subgridi%lon)
    npts_o = size(subgrido%lon)

    @assertEqual(npts_o, size(mindist_index))

    if (present(activei)) then
       @assertEqual(npts_i, size(activei))
       l_activei = activei
    else
       allocate(l_activei(npts_i))
       l_activei = .true.
    end if

    if (present(activeo)) then
       @assertEqual(npts_o, size(activeo))
       l_activeo = activeo
    else
       allocate(l_activeo(npts_o))
       l_activeo = .true.
    end if

    if (present(fill_missing_with_natveg)) then
       l_fill_missing_with_natveg = fill_missing_with_natveg
    else
       l_fill_missing_with_natveg = .false.
    end if

    call set_mindist(begi = 1, endi = npts_i, bego = 1, endo = npts_o, &
         activei = l_activei, activeo = l_activeo, subgridi = subgridi, subgrido = subgrido, &
         subgrid_special_indices = subgrid_special_indices, &
         fill_missing_with_natveg = l_fill_missing_with_natveg, &
         mindist_index = mindist_index)

  end subroutine wrap_set_mindist


  ! ========================================================================
  ! Tests
  ! ========================================================================


  @Test
  subroutine multiple_types_finds_same_type(this)
    ! If there are multiple types in the input, all equidistant from the target point,
    ! then make sure we find the point with the same type.
    !
    ! This tests a column-level point
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ctype = 15
    integer, parameter :: my_ltype = 25
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'column', &
         ctype = [my_ctype], &
         ltype = [my_ltype], &
         lat = [my_lat], &
         lon = [my_lon])

    ! Input points differ in either column type or landunit type
    subgridi = create_subgrid_info( &
         npts = 5, &
         name = 'column', &
         ctype = [my_ctype-1, my_ctype,   my_ctype, my_ctype,   my_ctype + 1], &
         ltype = [my_ltype,   my_ltype-1, my_ltype, my_ltype+1, my_ltype], &
         lat = [(my_lat, i=1,5)], &
         lon = [(my_lon, i=1,5)])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(3, mindist_index(1))

  end subroutine multiple_types_finds_same_type

  @Test
  subroutine glcmec_finds_closest_height(this)
    ! If there are multiple glc_mec points that are equidistant in space, pick the one
    ! with the closest height
    !
    ! This tests a column-level point
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ctype = 15
    integer, parameter :: my_ltype = subgrid_special_indices%ilun_landice_multiple_elevation_classes
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    real(r8), parameter :: my_topo = 1000._r8
    integer :: i
    integer :: mindist_index(1)

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'column', &
         ctype = [my_ctype], &
         ltype = [my_ltype], &
         lat = [my_lat], &
         lon = [my_lon], &
         topoglc = [my_topo])

    ! Note that we use a different ctype value for the target point: this should be
    ! ignored for glcmec
    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'column', &
         ctype = [my_ctype, my_ctype-1, my_ctype], &
         ltype = [my_ltype, my_ltype, my_ltype], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)], &
         topoglc = [my_topo - 10._r8, my_topo - 1._r8, my_topo + 100._r8])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(2, mindist_index(1))

  end subroutine glcmec_finds_closest_height

  @Test
  subroutine glcmec_finds_closest_latlon(this)
    ! For glc_mec, if we have some points closer in topographic height, but others closer
    ! in x-y space, pick the closer point in x-y space

    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ctype = 15
    integer, parameter :: my_ltype = subgrid_special_indices%ilun_landice_multiple_elevation_classes
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    real(r8), parameter :: my_topo = 1000._r8
    integer :: i
    integer :: mindist_index(1)

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'column', &
         ctype = [my_ctype], &
         ltype = [my_ltype], &
         lat = [my_lat], &
         lon = [my_lon], &
         topoglc = [my_topo])

    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'column', &
         ctype = [my_ctype, my_ctype, my_ctype], &
         ltype = [my_ltype, my_ltype, my_ltype], &
         lat = [my_lat - 10._r8, my_lat - 1._r8, my_lat + 10._r8], &
         lon = [(my_lon, i=1,3)], &
         topoglc = [my_topo, my_topo - 100._r8, my_topo])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(2, mindist_index(1))
  end subroutine glcmec_finds_closest_latlon

  @Test
  subroutine noncrop_to_crop_patch_variable_uses_correct_pft(this)
    ! For interpolation from a non-crop case to a crop case, ensure that a patch-level
    ! variable takes its input from the correct pft. This simulates what happens to the
    ! generic crop type in this case.
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ptype = 5
    integer :: my_ctype
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    associate( &
         icol_natveg => subgrid_special_indices%icol_vegetated_or_bare_soil, &
         ilun_natveg => subgrid_special_indices%ilun_vegetated_or_bare_soil, &
         ilun_crop   => subgrid_special_indices%ilun_crop &
         )

    my_ctype = icol_natveg + 1  ! arbitrary; we just want this to differ from icol_natveg

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'pft', &
         ptype = [my_ptype], &
         ctype = [my_ctype], &
         ltype = [ilun_crop], &
         lat = [my_lat], &
         lon = [my_lon])

    ! Input point #2 has the same ptype, but a different ctype and ltype. This one should
    ! be chosen. Other input points differ in ptype.
    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'pft', &
         ptype = [my_ptype - 1, my_ptype, my_ptype + 1], &
         ctype = [icol_natveg, icol_natveg, icol_natveg], &
         ltype = [ilun_natveg, ilun_natveg, ilun_natveg], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(2, mindist_index(1))

    end associate
  end subroutine noncrop_to_crop_patch_variable_uses_correct_pft

  @Test
  subroutine crop_to_noncrop_patch_variable_uses_correct_pft(this)
    ! For interpolation from a crop case to a non-crop case, ensure that a patch-level
    ! variable takes its input from the correct pft. This simulates what happens to the
    ! generic crop type in this case.
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ptype = 5
    integer :: input_ctype
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    associate( &
         icol_natveg => subgrid_special_indices%icol_vegetated_or_bare_soil, &
         ilun_natveg => subgrid_special_indices%ilun_vegetated_or_bare_soil, &
         ilun_crop   => subgrid_special_indices%ilun_crop &
         )

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'pft', &
         ptype = [my_ptype], &
         ctype = [icol_natveg], &
         ltype = [ilun_natveg], &
         lat = [my_lat], &
         lon = [my_lon])

    input_ctype = icol_natveg + 1  ! arbitrary; we just want this to differ from icol_natveg

    ! Input point #2 has the same ptype, but a different ctype and ltype. This one should
    ! be chosen. Other input points differ in ptype.
    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'pft', &
         ptype = [my_ptype - 1, my_ptype, my_ptype + 1], &
         ctype = [input_ctype, input_ctype, input_ctype], &
         ltype = [ilun_crop, ilun_crop, ilun_crop], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(2, mindist_index(1))

    end associate
  end subroutine crop_to_noncrop_patch_variable_uses_correct_pft

  @Test
  subroutine noncrop_to_crop_specific_crop_from_natveg(this)
    ! For interpolation from a non-crop case to a crop case, ensure that crop columns
    ! take their info from the natural veg column in the input.
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer :: my_ctype
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    associate( &
         icol_natveg => subgrid_special_indices%icol_vegetated_or_bare_soil, &
         ilun_natveg => subgrid_special_indices%ilun_vegetated_or_bare_soil, &
         ilun_crop   => subgrid_special_indices%ilun_crop &
         )

    my_ctype = icol_natveg + 1  ! arbitrary; we just want this to differ from icol_natveg

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'column', &
         ctype = [my_ctype], &
         ltype = [ilun_crop], &
         lat = [my_lat], &
         lon = [my_lon])

    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'column', &
         ctype = [icol_natveg - 2, icol_natveg, icol_natveg - 1], &
         ltype = [ilun_natveg - 2, ilun_natveg, ilun_natveg - 1], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)])

    ! For most landunits, we would need to set fill_missing_with_natveg to accomplish
    ! this. However, it should be done for a crop output point even with
    ! fill_missing_with_natveg .false.
    call wrap_set_mindist(subgridi, subgrido, mindist_index, &
         fill_missing_with_natveg = .false.)

    @assertEqual(2, mindist_index(1))

    end associate
  end subroutine noncrop_to_crop_specific_crop_from_natveg

  @Test
  subroutine newveg_uses_baresoil(this)
    ! If there's a new vegetation (patch) type, this should take inputs from the closest
    ! bare soil point.
    !
    ! In terms of code coverage, this is largely redundant with
    ! noncrop_to_crop_specific_crop_from_natveg. But I'm keeping it for now since it
    ! tests a different use case.
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ptype = 5
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    associate( &
         ipft_bare   => subgrid_special_indices%ipft_not_vegetated, &
         icol_natveg => subgrid_special_indices%icol_vegetated_or_bare_soil, &
         ilun_natveg => subgrid_special_indices%ilun_vegetated_or_bare_soil &
         )

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'pft', &
         ptype = [my_ptype], &
         ctype = [icol_natveg], &
         ltype = [ilun_natveg], &
         lat = [my_lat], &
         lon = [my_lon])

    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'pft', &
         ptype = [ipft_bare + 1, ipft_bare, ipft_bare + 2], &
         ctype = [(icol_natveg, i=1,3)], &
         ltype = [(ilun_natveg, i=1,3)], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)])

    ! For most landunits, we would need to set fill_missing_with_natveg to accomplish
    ! this. However, it should be done for a natural veg output point even with
    ! fill_missing_with_natveg .false.
    call wrap_set_mindist(subgridi, subgrido, mindist_index, &
         fill_missing_with_natveg = .false.)

    @assertEqual(2, mindist_index(1))

    end associate
  end subroutine newveg_uses_baresoil

  @Test
  subroutine baresoil_ignores_special_landunits(this)
    ! This test ensures that, when finding a match for a bare soil patch, we ignore
    ! special landunits. This is important because special landunits also have pft type =
    ! noveg.
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    associate( &
         ipft_bare => subgrid_special_indices%ipft_not_vegetated, &
         icol_veg => subgrid_special_indices%icol_vegetated_or_bare_soil, &
         ilun_veg => subgrid_special_indices%ilun_vegetated_or_bare_soil &
    )

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'pft', &
         ptype = [ipft_bare], &
         ctype = [icol_veg], &
         ltype = [ilun_veg], &
         lat = [my_lat], &
         lon = [my_lon])

    ! In the inputs, we use icol_veg even for special landunits, to make sure that even a
    ! patch whose pft and column type indicate natural veg is ignored if its landunit
    ! type is wrong.
    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'pft', &
         ptype = [ipft_bare, ipft_bare, ipft_bare], &
         ctype = [icol_veg, icol_veg, icol_veg], &
         ltype = [ilun_special, ilun_veg, ilun_special], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(2, mindist_index(1))

    end associate
  end subroutine baresoil_ignores_special_landunits

  @Test
  subroutine fill_missing_uses_natveg(this)
    ! This test ensures that, when using fill_missing_with_natveg, the code finds a point
    ! from the natural veg landunit. This is especially important to check for
    ! patch-level variables, for which special landunits also use the noveg (0) pft type.
    ! So here we just check a patch-level variable.
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer, parameter :: my_ptype = 5
    integer, parameter :: my_ctype = 15
    integer, parameter :: my_ltype = ilun_special
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8
    integer :: i
    integer :: mindist_index(1)

    associate( &
         ipft_bare => subgrid_special_indices%ipft_not_vegetated, &
         icol_veg => subgrid_special_indices%icol_vegetated_or_bare_soil, &
         ilun_veg => subgrid_special_indices%ilun_vegetated_or_bare_soil &
    )

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'pft', &
         ptype = [my_ptype], &
         ctype = [my_ctype], &
         ltype = [my_ltype], &
         lat = [my_lat], &
         lon = [my_lon])

    ! None of the input points match the output (in ptype, ctype or ltype). The 2nd point
    ! is a bare ground point, though, and so should be used as the template if we specify
    ! fill_missing_with_natveg.
    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'pft', &
         ptype = [ipft_bare, ipft_bare, ipft_bare], &
         ctype = [icol_veg, icol_veg, icol_veg], &
         ltype = [my_ltype + 1, ilun_veg, my_ltype + 1], &
         lat = [(my_lat, i=1,3)], &
         lon = [(my_lon, i=1,3)])

    call wrap_set_mindist(subgridi, subgrido, mindist_index, fill_missing_with_natveg = .true.)
    
    @assertEqual(2, mindist_index(1))
    
    end associate
  end subroutine fill_missing_uses_natveg

  @Test
  subroutine gridcell_finds_closest_latlon(this)
    ! For gridcell-level variables, should find closest gridcell in lat-lon space
    class(TestInitInterpMindist), intent(inout) :: this
    type(subgrid_type) :: subgridi, subgrido
    integer :: i
    integer :: mindist_index(1)
    real(r8), parameter :: my_lat = 31._r8
    real(r8), parameter :: my_lon = 41._r8

    subgrido = create_subgrid_info( &
         npts = 1, &
         name = 'gridcell', &
         lat = [my_lat], &
         lon = [my_lon])

    subgridi = create_subgrid_info( &
         npts = 3, &
         name = 'gridcell', &
         lat = [my_lat - 10._r8, my_lat - 1._r8, my_lat + 10._r8], &
         lon = [(my_lon, i=1,3)])

    call wrap_set_mindist(subgridi, subgrido, mindist_index)

    @assertEqual(2, mindist_index(1))
  end subroutine gridcell_finds_closest_latlon

end module test_init_interp_mindist
