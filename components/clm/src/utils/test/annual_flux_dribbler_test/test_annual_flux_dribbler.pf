module test_annual_flux_dribbler

  ! Tests of AnnualFluxDribbler

  use pfunit_mod
  use AnnualFluxDribbler
  use shr_kind_mod , only : r8 => shr_kind_r8
  use unittestSubgridMod
  use unittestSimpleSubgridSetupsMod
  use unittestTimeManagerMod, only : unittest_timemgr_setup, unittest_timemgr_teardown
  use unittestTimeManagerMod, only : &
       set_date => unittest_timemgr_set_curr_date

  implicit none

  @TestCase
  type, extends(TestCase) :: TestDribbler
     ! Put the dribbler object in the TestDribbler class so we can call Clean in teardown
     type(annual_flux_dribbler_type) :: dribbler
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestDribbler

  real(r8), parameter :: tol = 1.e-13_r8

  ! Some tests need a larger tolerance, since we're dealing with values with large
  ! magnitudes
  real(r8), parameter :: tol_large = 1.e-6_r8

  ! Deliberately choosing a dtime different from the standard 1800, to make sure it's
  ! handled correctly
  integer, parameter :: dtime = 3600

  real(r8), parameter :: secs_in_year = 365._r8 * 86400._r8

contains

  subroutine setUp(this)
    class(TestDribbler), intent(inout) :: this

    call unittest_timemgr_setup(dtime=dtime)
  end subroutine setUp

  subroutine tearDown(this)
    class(TestDribbler), intent(inout) :: this

    call this%dribbler%Clean()
    call unittest_timemgr_teardown()
    call unittest_subgrid_teardown()
  end subroutine tearDown

  subroutine set_date_first_timestep_of_year()
    ! Sets the time manager's date so that it's the first timestep of the year, in year 2
    call set_date(yr=2, mon=1, day=1, tod=dtime)
  end subroutine set_date_first_timestep_of_year

  @Test
  subroutine firstTimestepOfYear_fluxDribbled(this)
    ! Add a delta on the first time step of the year; make sure this flux gets divided by
    ! the proper amount to create a flux in that time step
    class(TestDribbler), intent(inout) :: this
    real(r8), parameter :: delta(1) = [1.e9_r8]
    real(r8) :: flux(1)
    real(r8) :: amount_left_to_dribble(1)
    real(r8) :: amount_dribbled_in_this_timestep
    real(r8) :: tot_amount_to_dribble
    real(r8) :: expected_flux

    call setup_single_veg_patch(pft_type=1)
    this%dribbler = annual_flux_dribbler_type(bounds, &
         name = 'foo', units = '-')
    call set_date_first_timestep_of_year()

    call this%dribbler%set_curr_delta(bounds, delta)
    call this%dribbler%get_curr_flux(bounds, flux)
    call this%dribbler%get_amount_left_to_dribble_end(bounds, amount_left_to_dribble)

    expected_flux = delta(1) / secs_in_year
    @assertEqual(expected_flux, flux(1), tolerance=tol)

    ! Also make sure that flux*dtime + amount_left_to_dribble = delta - i.e., if you add
    ! the amount dribbled in this timestep to the reported amount left to dribble, you
    ! get the original delta
    amount_dribbled_in_this_timestep = flux(1) * dtime
    tot_amount_to_dribble = amount_dribbled_in_this_timestep + amount_left_to_dribble(1)
    @assertEqual(delta(1), tot_amount_to_dribble, tolerance=tol)
  end subroutine firstTimestepOfYear_fluxDribbled

  @Test
  subroutine deltaAddedMidyear_ignoredInLaterTimesteps(this)
    ! Make sure that a delta added mid-year is ignored on all later time steps
    class(TestDribbler), intent(inout) :: this
    real(r8), parameter :: delta_first_timestep(1) = [1.e9_r8]
    real(r8), parameter :: delta_should_be_ignored(1) = [3.e6_r8]
    real(r8) :: flux(1)
    real(r8) :: expected_flux

    call setup_single_veg_patch(pft_type=1)
    this%dribbler = annual_flux_dribbler_type(bounds, &
         name = 'foo', units = '-')

    ! Add some delta at the beginning of the year, which will go into the dribbling flux
    call set_date_first_timestep_of_year()
    call this%dribbler%set_curr_delta(bounds, delta_first_timestep)

    ! Add some delta that should be ignored
    call set_date(yr=2, mon=1, day=2, tod=dtime)
    call this%dribbler%set_curr_delta(bounds, delta_should_be_ignored)

    ! Advance time; in this time step, the delta is 0
    call set_date(yr=2, mon=1, day=3, tod=dtime)
    call this%dribbler%set_curr_delta(bounds, [0._r8])

    call this%dribbler%get_curr_flux(bounds, flux)

    expected_flux = delta_first_timestep(1) / secs_in_year
    @assertEqual(expected_flux, flux(1), tolerance=tol)
  end subroutine deltaAddedMidyear_ignoredInLaterTimesteps

  @Test
  subroutine secondTimestep_fluxAdded(this)
    ! Add a delta on the first time step of the year. Then change to the second time step
    ! and add some other delta. Make sure that the flux in that later time step is the sum
    ! of the dribbled flux and the new flux.
    class(TestDribbler), intent(inout) :: this
    real(r8), parameter :: delta_first_timestep(1) = [1.e9_r8]
    real(r8), parameter :: delta_second_timestep(1) = [5000._r8]
    real(r8) :: flux(1)
    real(r8) :: amount_left_to_dribble(1)
    real(r8) :: amount_dribbled_so_far, tot_amount_to_dribble
    real(r8) :: expected_dribbled, expected_from_this_timestep, expected_flux

    call setup_single_veg_patch(pft_type=1)
    this%dribbler = annual_flux_dribbler_type(bounds, &
         name = 'foo', units = '-')

    ! Add some delta at the beginning of the year, which will go into the dribbling flux
    call set_date_first_timestep_of_year()
    call this%dribbler%set_curr_delta(bounds, delta_first_timestep)

    ! Add some delta in the current timestep
    call set_date(yr=2, mon=1, day=1, tod=dtime*2)
    call this%dribbler%set_curr_delta(bounds, delta_second_timestep)

    call this%dribbler%get_curr_flux(bounds, flux)
    call this%dribbler%get_amount_left_to_dribble_end(bounds, amount_left_to_dribble)

    expected_dribbled = delta_first_timestep(1) / secs_in_year
    expected_from_this_timestep = delta_second_timestep(1) / dtime
    expected_flux = expected_dribbled + expected_from_this_timestep
    @assertEqual(expected_flux, flux(1), tolerance=tol)

    ! Also make sure that (dribbled flux)*dtime*2 + amount_left_to_dribble = delta - i.e.,
    ! if you add the amount dribbled in this timestep and the first timestep to the
    ! reported amount left to dribble, you get the original delta
    amount_dribbled_so_far = expected_dribbled * dtime * 2
    tot_amount_to_dribble = amount_dribbled_so_far + amount_left_to_dribble(1)
    @assertEqual(delta_first_timestep(1), tot_amount_to_dribble, tolerance=tol)
  end subroutine secondTimestep_fluxAdded

  @Test
  subroutine secondToLastTimestep_amountLeft(this)
    ! Check amount left to dribble on the second to last time step in the year. This
    ! checks both get_amount_left_to_dribble_beg and get_amount_left_to_dribble_end
    class(TestDribbler), intent(inout) :: this
    real(r8), parameter :: delta(1) = [1.e9_r8]
    real(r8) :: amount_left_to_dribble_beg(1)
    real(r8) :: amount_left_to_dribble_end(1)
    real(r8) :: dribbled_flux
    real(r8) :: dribbled_amount_per_timestep

    call setup_single_veg_patch(pft_type=1)
    this%dribbler = annual_flux_dribbler_type(bounds, &
         name = 'foo', units = '-')
    call set_date_first_timestep_of_year()
    call this%dribbler%set_curr_delta(bounds, delta)

    call set_date(yr=2, mon=12, day=31, tod=86400-dtime)
    call this%dribbler%get_amount_left_to_dribble_beg(bounds, amount_left_to_dribble_beg)
    call this%dribbler%get_amount_left_to_dribble_end(bounds, amount_left_to_dribble_end)

    dribbled_flux = delta(1) / secs_in_year
    dribbled_amount_per_timestep = dribbled_flux * dtime
    @assertEqual(2._r8*dribbled_amount_per_timestep, amount_left_to_dribble_beg(1), tolerance=tol_large)
    @assertEqual(dribbled_amount_per_timestep, amount_left_to_dribble_end(1), tolerance=tol_large)
  end subroutine secondToLastTimestep_amountLeft

  @Test
  subroutine lastTimestep_amountLeftEnd_is0(this)
    ! On the last timestep of the year, the amount returned by
    ! get_amount_left_to_dribble_end should be 0
    class(TestDribbler), intent(inout) :: this
    real(r8), parameter :: delta(1) = [1.e9_r8]
    real(r8) :: amount_left_to_dribble(1)

    call setup_single_veg_patch(pft_type=1)
    this%dribbler = annual_flux_dribbler_type(bounds, &
         name = 'foo', units = '-')
    call set_date_first_timestep_of_year()
    call this%dribbler%set_curr_delta(bounds, delta)

    ! Set date to the last time step of the year (this looks like the start of the next
    ! year since date is given at the end of the time step)
    call set_date(yr=3, mon=1, day=1, tod=0)
    call this%dribbler%get_amount_left_to_dribble_end(bounds, amount_left_to_dribble)

    @assertEqual(0._r8, amount_left_to_dribble(1))
  end subroutine lastTimestep_amountLeftEnd_is0

  @Test
  subroutine firstTimestep_amountLeftBeg_is0(this)
    ! On the first timestep of the year, get_amount_left_to_dribble_beg should give 0
    class(TestDribbler), intent(inout) :: this
    real(r8), parameter :: delta(1) = [1.e9_r8]
    real(r8) :: amount_left_to_dribble(1)

    call setup_single_veg_patch(pft_type=1)
    this%dribbler = annual_flux_dribbler_type(bounds, &
         name = 'foo', units = '-')
    call set_date_first_timestep_of_year()
    call this%dribbler%set_curr_delta(bounds, delta)

    call this%dribbler%get_amount_left_to_dribble_beg(bounds, amount_left_to_dribble)

    @assertEqual(0._r8, amount_left_to_dribble(1))
  end subroutine firstTimestep_amountLeftBeg_is0

end module test_annual_flux_dribbler
